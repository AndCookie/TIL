/**
 * 
 */

anychart.onDocumentReady(function () {
             $.ajax({
                 url: 'bar',
                 method: 'get',
                 success: function(data) {
                     // 데이터를 처리하고 차트 생성
   
                     var chartData = []; // 차트 데이터를 저장할 배열
   
                     // 데이터를 순회하며 차트 데이터 형식에 맞게 추가
                     for (var i = 0; i < data.length; i++) {
                         var item = data[i];
                         chartData.push([item.companyNn, item.reviewCnt]);
                     }
   
                     // 차트 생성
                     var chart = anychart.column();
   
                     // 컬럼 시리즈 생성 및 데이터 설정
                     var series = chart.column(chartData);
                     
                     //투명하게
                     chart.background().fill("rgba(0, 0, 0, 0)");
   
                     // 차트 제목 설정
                     // chart.title("Total number of reviews by brand");
   
                     // x축과 y축의 제목 설정
                     chart.xAxis().title("brand");
                     chart.yAxis().title("number of review");
   
                     // 컨테이너 ID 설정
                     chart.container("container1");
   
                     // 차트 그리기
                     chart.draw();
                 }
             });
           });
           
           
           
(function () {
             function ac_add_to_head(el) {
                 var head = document.getElementsByTagName('head')[0];
                 head.insertBefore(el, head.firstChild);
             }
             function ac_add_link(url) {
                 var el = document.createElement('link');
                 el.rel = 'stylesheet'; el.type = 'text/css'; el.media = 'all'; el.href = url;
                 ac_add_to_head(el);
             }
             function ac_add_style(css) {
                 var ac_style = document.createElement('style');
                 if (ac_style.styleSheet) ac_style.styleSheet.cssText = css;
                 else ac_style.appendChild(document.createTextNode(css));
                 ac_add_to_head(ac_style);
             }
             ac_add_link('https://cdn.anychart.com/releases/8.11.1/css/anychart-ui.min.css?hcode=a0c21fc77e1449cc86299c5faa067dc4');
             ac_add_style(document.getElementById("ac_style_samples-bct-radar-area-chart").innerHTML);
             ac_add_style(".anychart-embed-samples-bct-radar-area-chart{width:600px;height:450px;}");
         })();
   
         anychart.onDocumentReady(function () {
             $.ajax({
                 url: 'radar',
                 method: 'get',
                 success: function(data) {
                     // Process the received data and create the chart data array
                     var chartData = [];
   
                     // Iterate over the received data and format it for the chart
                     for (var i = 0; i < data.length; i++) {
                         var item = data[i];
                         chartData.push({ x: item.company, value: item.rate });
                     }
                  
                     // create a chart
                     var chart = anychart.radar();
   
                     // create an area series and set the data
                     var series = chart.area(chartData);
   
                    //투명하게
                     chart.background().fill("rgba(0, 0, 0, 0)");
                    
                     // !!! 제목 !!!
                     // chart.title("Positive Sentiment Rate");
   
                     // set the container id
                     chart.container("container2");
   
                     // initiate drawing the chart
                     chart.draw();
                 }
             });
         });
         
         
         
anychart.onDocumentReady(function () {
             $.ajax({
               url: 'spline1',
               method: 'get',
               success: function (data) {
                 // Process the received data and create the chart
                 var chartData = []; // Array to store the chart data
   
                 // Iterate over the received data and format it for the chart
                 for (var i = 0; i < data.length; i++) {
                   var item = data[i];
                   chartData.push({ x: item.yr, value: item.starRate });
                 }
   
                 // Create a chart
                 var chart = anychart.line();
   
                 // Create a spline series and set the data
                 var series = chart.spline(chartData);
   
                 // Set the chart title
                 // chart.title("Star-rating graph");
                 
                 //투명하게
                  chart.background().fill("rgba(0, 0, 0, 0)");
                 
                 // Set the titles of the axes
                 var xAxis = chart.xAxis();
                 xAxis.title("Year");
                 var yAxis = chart.yAxis();
                 yAxis.title("Rating");
   
                 // Set the container id
                 chart.container("container3");
   
                 // Initiate drawing the chart
                 chart.draw();
               },
               passive: true
             });
           });
                       
const ctx = document.getElementById('myChart');
               
     $.ajax({
       url: 'bubble',
       method: 'GET',
       dataType: 'json',
       success: function (data) {
         const inputData = data;
   
         const datasets = inputData.map(item => ({
           x: item.count1,
           y:-item.count0,
           r: Math.sqrt(item.count0 * item.count1),
           companyName: item.companyName,
         }));
   
         const maxRadius = Math.max(...datasets.map(item => item.r));
   
         const scaleFactor = 50 / maxRadius;
         const maxAllowedRadius = 50;
   
         const normalizedDatasets = datasets.map(item => ({
           x: item.x,
           y: item.y,
           r: Math.min(item.r * scaleFactor, maxAllowedRadius),
           companyName: item.companyName,
         }));
   
         const chartData = {
           datasets: normalizedDatasets.map((item, index) => ({
             label: item.companyName,
             data: [{ x: item.x, y: item.y, r: item.r }],
             backgroundColor: getRandomPastelColor(index),
             borderColor: 'rgba(0, 0, 0, 0)',
             borderWidth: 0,
           }))
         };
   
         new Chart(ctx, {
           type: 'bubble',
           data: chartData,
           options: {
             plugins: {
               tooltip: {
                 callbacks: {
                   title: function () {
                     return '';
                   },
                   label: function (context) {
                     var datasetLabel = '';
                     var companyName = context.dataset.label || '';
                     var data = context.dataset.data[context.dataIndex];
                     return datasetLabel + ': (' + data.x + ', ' + data.y + ', ' + data.r + ') - ' + companyName;
                   }
                 }
               }
             },
             layout: { // 레이아웃 조정
               padding: { // 그래프와 범례 사이 여백
                 top: 0,
                 right: 50,
                 bottom: 20,
                 left: 0
               }
             },
             legend: {
               position: 'top' // 범례를 그래프 상단에 위치
             },
             elements: {
               point: {
                 radius: function (context) {
                   return context.dataset.data[context.dataIndex].r;
                 },
                 hoverRadius: function (context) {
                   return context.dataset.data[context.dataIndex].r + 2;
                 },
                 hitRadius: 10,
                 borderWidth: 0,
                 backgroundColor: function (context) {
                   return context.dataset.backgroundColor;
                 },
                 hoverBackgroundColor: function (context) {
                   return context.dataset.backgroundColor;
                 },
                 pointStyle: 'circle'
               }
             }
           }
         });
       }
     });
   
 function getRandomPastelColor(index) {
   const hue = (index * 57) % 360; // 인덱스를 이용해 고유한 색상을 생성
   const pastelColor = 'hsl(' + hue + ', 70%, 80%)';
   return pastelColor;
 }
 

anychart.onDocumentReady(function () {
            $.ajax({
                 url: 'spline2',
                 method: 'get',
                 success: function(data) {
              // create data
              var chartData = [];
              for (var i = 0; i < data.length; i++) {
                  var item = data[i];
                  chartData.push({ x: item.reviewYr, value: item.reviews });
              }
   
              // create a chart
              var chart = anychart.line();
   
              // create a spline series and set the data
              var series = chart.spline(chartData);
   
              // set the chart title
              // chart.title("Sales trend by year");
              
              //투명하게
               chart.background().fill("rgba(0, 0, 0, 0)");
              // set the titles of the axes
              var xAxis = chart.xAxis();
              xAxis.title("year");
              var yAxis = chart.yAxis();
              yAxis.title("Sales(Reviews)");
   
              // set the container id
              chart.container("container4");
   
              // initiate drawing the chart
              chart.draw();
                 },
                 passive: true
             });
          });
          
          
          
anychart.onDocumentReady(function() {
                         // Create a chart
                         var chart = anychart.line();
               
                         // Create a container for the legend
                         var legend = chart.legend();
                         legend.title("Brands"); // Set the legend title
               
                         $.ajax({
                           url: 'spline3',
                           method: 'get',
                           success: function(data) {
                             // Iterate over the data and create a series for each brand
                             var brands = [];
                             for (var i = 0; i < data.length; i++) {
                               var item = data[i];
                               if (!brands.includes(item.brand)) {
                                 brands.push(item.brand);
                                 var filteredData = data.filter(function(d) {
                                   return d.brand === item.brand;
                                 }).map(function(d) {
                                   return {
                                     x: d.salesYr,
                                     value: d.sales
                                   };
                                 });
                                 var series = chart.line(filteredData);
                                 series.name(item.brand);
               
                                 // Configure tooltip for each series
                                 var tooltip = series.tooltip();
                                 tooltip.title().text(item.brand); // Set the tooltip title as the brand
                                 tooltip.format("{%x}: {%value}"); // Set the tooltip format for x (year) and value (sales)
                               }
                             }
               
                             // Set the chart title
                             // chart.title("Sales trend by year");
                           
                             //투명하게
                              chart.background().fill("rgba(0, 0, 0, 0)");
                             
                             // Set the titles of the axes
                             var xAxis = chart.xAxis();
                             xAxis.title("Year");
                             var yAxis = chart.yAxis();
                             yAxis.title("Sales");
               
                             // Set the container id
                             chart.container("container5");
               
                             // Configure the legend
                             chart.legend()
                               .enabled(true) // Enable the legend
                               .position("bottom") // Position the legend at the top
                               .itemsLayout("horizontal") // Display legend items vertically
                               .align("center") // Right-align the legend items
                               .itemsSpacing(10) // Add spacing between legend items
                               .padding([0, 0, 20, 0]); // Add padding to the legend (top, right, bottom, left)
               
                             // Initiate drawing the chart
                             chart.draw();
                           }
                         });
                       });         